format_version: "11"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
    - ORIG_WORDIR: $BITRISE_SOURCE_DIR
    - WORKDIR: .
    - TEST_REPO_URL: https://github.com/bitrise-io/git-clone-test.git
    # define these envs in your .bitrise.secrets.yml
    - GIT_CLONE_SSH_PRIVATE_KEY: $GIT_CLONE_SSH_PRIVATE_KEY

workflows:
  test_generate_changelog:
    after_run:
      - utility_test_generate_changelog_by_commit
      - utility_test_generate_changelog_by_tag

  utility_test_generate_changelog_by_commit:
    envs:
      - BITRISE_GIT_COMMIT: a409478
      - NEW_VERSON: "0.1.1"
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - commit: $BITRISE_GIT_COMMIT
            - branch: "test/generate-changelog"
            - fetch_tags: "yes"
            - update_submodules: "no"
    after_run:
      - _assert_changelog

  utility_test_generate_changelog_by_tag:
    envs:
      - BITRISE_GIT_TAG: "0.1.1"
      - NEW_VERSON: $BITRISE_GIT_TAG
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - tag: $BITRISE_GIT_TAG
            - branch: "test/generate-changelog"
            - fetch_tags: "yes"
            - update_submodules: "no"
    after_run:
      - _assert_changelog

  _assert_changelog:
    steps:
      - generate-changelog:
          inputs:
            - working_dir: $WORKDIR
            - new_version: "$NEW_VERSON"
      - script:
          inputs:
            - content: |-
                #!/bin/env bash
                set -ex

                EXPECTED_CHANGELOG="* [a409478] Add newline to the description.
                * [b002ab7] Add repository description.
                * [996fa77] Add newline to README.md.
                "

                if [ "$BITRISE_CHANGELOG" = "$EXPECTED_CHANGELOG" ]; then
                    echo "Expected changelog generated."
                else
                    echo "Invalid changelog generated:"
                    echo "$BITRISE_CHANGELOG"
                    exit 1
                fi

  test_submodule:
    before_run:
      - _activate_ssh_key
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - branch: "master"
            - clone_depth: ""
            - update_submodules: "yes"
    after_run:
      - _log_outputs

  utility_error_test:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - branch: "fake"
    after_run:
      - _log_outputs

  test_error:
    steps:
      - script:
          inputs:
            - content: |-
                #/bin/env bash
                set -x
                bitrise run --config=./e2e/bitrise.yml utility_error_test
                if [ $? == 0 ]; then
                  exit 1
                fi

  test_no_checkout:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - commit: ""
            - tag: ""
            - branch: ""
    after_run:
      - _log_outputs

  test_checkout_commit:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - commit: 7a93251a9bf08fb8c6b19fc02f6d94618de6b386
            - clone_depth: ""
            - update_submodules: "no"
    after_run:
      - _log_outputs

  test_checkout_commit_on_branch:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - commit: 7a93251a9bf08fb8c6b19fc02f6d94618de6b386
            - branch: "master"
            - clone_depth: ""
            - update_submodules: "no"
    after_run:
      - _log_outputs

  test_checkout_tag:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - tag: 0.9.2
            - clone_depth: ""
            - fetch_tags: "no"
            - update_submodules: "no"
    after_run:
      - _log_outputs

  test_checkout_tag_with_other_branch:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - tag: 0.9.2
            - branch: "carthage"
            - clone_depth: "1"
            - fetch_tags: "yes"
            - update_submodules: "no"
    after_run:
      - _log_outputs

  test_checkout_tag_with_equally_named_branch:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - tag: pr_test_new
            - branch: "pr_test_new"
            - clone_depth: ""
            - update_submodules: "no"
    after_run:
      - _log_outputs

  test_checkout_branch:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - branch: master
            - clone_depth: ""
            - update_submodules: "no"
    after_run:
      - _log_outputs

  test_checkout_current_dir:
    before_run:
      - _prepare
    steps:
      - change-workdir:
          inputs:
            - path: $WORKDIR
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - branch: master
            - update_submodules: "no"
      - change-workdir:
          inputs:
            - path: $ORIG_WORDIR
    after_run:
      - _log_outputs

  test_checkout_github_pull_request:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - pull_request_id: 5
            - pull_request_merge_branch: "pull/5/merge"
            - pull_request_head_branch: "pull/5/head"
            - pull_request_repository_url: ""
            - branch_dest: "master"
            - manual_merge: "no"
            - update_submodules: "no"
    after_run:
      - _log_outputs

  test_checkout_pull_request_no_merge:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: "true"
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - pull_request_id: 5
            - pull_request_merge_branch: "pull/5/merge"
            - pull_request_head_branch: "pull/5/head"
            - pull_request_repository_url: ""
            - branch_dest: "master"
            - commit: "4301a9b8499ed3e87778dd053c55fd698d0a3b7e"
            - manual_merge: "no"
            - merge_pr: "no"
            - update_submodules: "no"
    after_run:
      - _log_outputs

  test_checkout_pull_request_standard_branch:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - pull_request_merge_branch: "pr_test"
            - pull_request_repository_url: ""
            - branch_dest: "master"
            - manual_merge: "no"
            - update_submodules: "no"
    after_run:
      - _log_outputs

  test_checkout_pull_request_with_depth:
    before_run:
      - _activate_ssh_key
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - pull_request_id: 5
            - pull_request_merge_branch: "pull/5/merge"
            - pull_request_head_branch: "pull/5/head"
            - pull_request_repository_url: ""
            - branch_dest: "master"
            - clone_depth: 1
            - manual_merge: "no"
    after_run:
      - _log_outputs

  test_manual_merge_unshallow:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - pull_request_id: 7
            - pull_request_merge_branch: "pull/7/merge"
            - pull_request_head_branch: "pull/7/head"
            - pull_request_repository_url: ""
            - branch_dest: "master"
            - commit: "76a934ae80f12bb9b504bbc86f64a1d310e5db64"
            - branch: "test/commit-messages"
            - clone_depth: "1"
            - update_submodules: "no"
    after_run:
      - _log_outputs

  test_unshallow:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - commit: cfba2b01332e31cb1568dbf3f22edce063118bae
            - clone_depth: 1
            - update_submodules: "no"
    after_run:
      - _log_outputs

  test_commit_logs:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - commit: "76a934ae80f12bb9b504bbc86f64a1d310e5db64"
            - branch: "test/commit-messages"
            - update_submodules: "no"
      - script:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                check() {
                  local env=$1
                  local get=${!1}
                  local expected=$2
                  if [[ "${get}" != "${expected}" ]]; then
                    printf "Error: for env var '%s' expected: '%s', get: '%s'\n" "${env}" "${expected}" "${get}"
                    exit 1
                  fi
                }

                check "GIT_CLONE_COMMIT_HASH" "76a934ae80f12bb9b504bbc86f64a1d310e5db64"
                check "GIT_CLONE_COMMIT_MESSAGE_SUBJECT" "Sample commit message subject"
                check "GIT_CLONE_COMMIT_MESSAGE_BODY" "Sample commit message body"
                check "GIT_CLONE_COMMIT_COUNT" "25"
                check "GIT_CLONE_COMMIT_AUTHOR_NAME" "Krisztian Dobmayer"
                check "GIT_CLONE_COMMIT_AUTHOR_EMAIL" "krisztian.dobmayer@bitrise.io"
                check "GIT_CLONE_COMMIT_COMMITER_NAME" "Krisztian Dobmayer"
                check "GIT_CLONE_COMMIT_COMMITER_EMAIL" "krisztian.dobmayer@bitrise.io"
      - ensure-clean-git:
          inputs:
            - dir_to_check: $WORKDIR

  test_hosted_git_ssh_prefix:
    before_run:
      - _activate_ssh_key
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: "ssh://git@gitlab.com:22/bitrise/git-clone-test.git"
            - clone_into_dir: $WORKDIR
            - pull_request_id: ""
            - pull_request_merge_branch: ""
            - pull_request_repository_url: "git@gitlab.com:bitrise/git-clone-test.git"
            - branch_dest: "master"
            - commit: "8d558357cf085bc26af23b88f6bc4c07e175b8ac"
            - branch: "develop"
    after_run:
      - _log_outputs

  test_hosted_git_notfork:
    before_run:
      - _activate_ssh_key
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - pull_request_id: 7
            - pull_request_merge_branch: "pull/7/merge"
            - pull_request_repository_url: "git@github.com:bitrise-io/git-clone-test.git"
            - branch_dest: "master"
            - commit: "76a934ae80f12bb9b504bbc86f64a1d310e5db64"
            - branch: "test/commit-messages"
    after_run:
      - _log_outputs

  test_unrelated_histories:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - pull_request_id: 8
            - pull_request_merge_branch: "pull/8/merge"
            - pull_request_repository_url: $TEST_REPO_URL
            - branch_dest: "unrelated-histories/master"
            - commit: "62af44590c7a2b937726f2c3024a88a129b330b5"
            - clone_depth: "1"
            - manual_merge: "no"
            - update_submodules: "no"
    after_run:
      - _log_outputs

  test_diff_file:
    before_run:
      - _prepare
    steps:
      - script:
          inputs:
            - content: |-
                #!/bin/env bash
                set -ex
                DIFF_DIR=$WORKDIR/diff_dir
                GIT_DIR=$WORKDIR/repoA
                PR_GIT_DIR=$WORKDIR/repoB
                CLONE_DIR=$WORKDIR/cloneDir
                mkdir ${GIT_DIR}
                mkdir ${PR_GIT_DIR}
                mkdir ${DIFF_DIR}
                mkdir ${CLONE_DIR}

                # Repo A
                cd ${GIT_DIR}
                git init
                echo "aabbccdd" > README.md
                git add .
                git commit -m "Initial commit A"
                cd -

                # Repo B (clone of Repo A)
                cd ${PR_GIT_DIR}
                git clone ${GIT_DIR} .
                echo "eeffgghh" >>README.md
                git add .
                git commit -m "PR commit B"

                # Diff files
                git diff HEAD^ HEAD | tee -a ${DIFF_DIR}/diff.txt
                cd -

                # Set envs
                envman add --key TEST_DIFF_CLONE_DIR --value ${CLONE_DIR}
                envman add --key TEST_DIFF_REPO_URL --value ${GIT_DIR}
                envman add --key TEST_DIFF_PR_REPOSITORY_URL --value ${PR_GIT_DIR}
                envman add --key BITRISE_BUILD_URL --value "file://${DIFF_DIR}"
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_DIFF_REPO_URL
            - clone_into_dir: $TEST_DIFF_CLONE_DIR
            - pull_request_id: 8
            - pull_request_repository_url: $TEST_DIFF_PR_REPOSITORY_URL
            - pull_request_merge_branch: ""
            - branch_dest: "master"
            - branch: "master"
            - commit: "c6810e6"
            - clone_depth: "1"
            - manual_merge: "no"
      - script:
          inputs:
            - content: |-
                #!/bin/env bash
                eval "$LOG_OUTPUTS_SCRIPT"
                set -ex
                diff ${CLONE_INTO_DIR}/README.md ${PR_REPOSITORY_URL}/README.md

  test_sparse_checkout_branch:
    before_run:
      - _activate_ssh_key
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - branch: "master"
            - sparse_directories: |-
                git-clone-sample
    after_run:
      - _log_outputs

  test_sparse_checkout_commit_on_branch:
    before_run:
      - _activate_ssh_key
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - commit: 7a93251a9bf08fb8c6b19fc02f6d94618de6b386
            - branch: "master"
            - sparse_directories: |-
                git-clone-sample
    after_run:
      - _log_outputs

  test_sparse_checkout_unshallow:
    before_run:
      - _activate_ssh_key
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - commit: cfba2b01332e31cb1568dbf3f22edce063118bae
            - clone_depth: 1
            - sparse_directories: |-
                git-clone-sample
    after_run:
      - _log_outputs

  test_too_long_commit_message:
    before_run:
      - _prepare
    steps:
      - path::./:
          run_if: true
          inputs:
            - repository_url: $TEST_REPO_URL
            - clone_into_dir: $WORKDIR
            - commit: "2e8cb1e06cda054e6eb861e56761acd52441cd86"
            - update_submodules: "no"
      - script:
          inputs:
            - content: |-
                #!/bin/env bash
                eval "$LOG_OUTPUTS_SCRIPT"
                # --- This test only works for default 20kbyte env sizes, if altered, test should be modified accordingly.
                if [ ${#GIT_CLONE_COMMIT_MESSAGE_BODY} -gt "20480" ]; then
                  echo "Message body is bigger than 20480 chars"
                  exit 1
                fi
                if [ ${#GIT_CLONE_COMMIT_MESSAGE_SUBJECT} -gt "20480" ]; then
                  echo "Message subject is bigger than 20480 chars"
                  exit 1
                fi
      - ensure-clean-git:
          inputs:
            - dir_to_check: $WORKDIR

  _prepare:
    steps:
      - script:
          inputs:
            - title: Create temporary dir
            - content: |-
                #!/bin/env bash
                set -ex
                envman add --key WORKDIR --value $(mktemp -d -t step-git-cloneXXXXXX)
      - script:
          title: Clear environment variables set by bitrise.io, to not interfere with tests
          inputs:
            - content: |-
                #!/bin/env bash
                set -ex
                # Inputs
                envman unset --key GIT_REPOSITORY_URL
                envman set --key BITRISE_SOURCE_DIR --value $ORIG_WORDIR
                envman unset --key BITRISE_GIT_COMMIT
                envman unset --key BITRISE_GIT_TAG
                envman unset --key BITRISE_GIT_BRANCH
                envman unset --key BITRISEIO_GIT_BRANCH_DEST
                envman unset --key PULL_REQUEST_ID
                envman unset --key BITRISEIO_PULL_REQUEST_REPOSITORY_URL
                envman unset --key BITRISEIO_PULL_REQUEST_MERGE_BRANCH
                envman unset --key BITRISEIO_PULL_REQUEST_HEAD_BRANCH
                envman unset --key BITRISE_BUILD_URL
                envman unset --key BITRISE_BUILD_API_TOKEN
                # Outputs
                envman unset --key GIT_CLONE_COMMIT_HASH
                envman unset --key GIT_CLONE_COMMIT_MESSAGE_SUBJECT
                envman unset --key GIT_CLONE_COMMIT_MESSAGE_BODY
                envman unset --key GIT_CLONE_COMMIT_COUNT
                envman unset --key GIT_CLONE_COMMIT_AUTHOR_NAME
                envman unset --key GIT_CLONE_COMMIT_AUTHOR_EMAIL
                envman unset --key GIT_CLONE_COMMIT_COMMITER_NAME
                envman unset --key GIT_CLONE_COMMIT_COMMITER_EMAIL

  _log_outputs:
    steps:  
      - script:
          inputs:
            - content: |-
                #!/bin/env bash
                echo "GIT_CLONE_COMMIT_HASH: ${GIT_CLONE_COMMIT_HASH}"
                echo "GIT_CLONE_COMMIT_MESSAGE_SUBJECT: ${GIT_CLONE_COMMIT_MESSAGE_SUBJECT}"
                echo "GIT_CLONE_COMMIT_MESSAGE_BODY: ${GIT_CLONE_COMMIT_MESSAGE_BODY}"
                echo "GIT_CLONE_COMMIT_COUNT: ${GIT_CLONE_COMMIT_COUNT}"
                echo "GIT_CLONE_COMMIT_AUTHOR_NAME: ${GIT_CLONE_COMMIT_AUTHOR_NAME}"
                echo "GIT_CLONE_COMMIT_AUTHOR_EMAIL: ${GIT_CLONE_COMMIT_AUTHOR_EMAIL}"
                echo "GIT_CLONE_COMMIT_COMMITER_NAME: ${GIT_CLONE_COMMIT_COMMITER_NAME}"
                echo "GIT_CLONE_COMMIT_COMMITER_EMAIL: ${GIT_CLONE_COMMIT_COMMITER_EMAIL}"
      - ensure-clean-git:
          inputs:
            - dir_to_check: $WORKDIR

  _activate_ssh_key:
    steps:
      - activate-ssh-key:
          run_if: '{{getenv "GIT_CLONE_SSH_PRIVATE_KEY" | ne ""}}'
          inputs:
          - ssh_rsa_private_key: $GIT_CLONE_SSH_PRIVATE_KEY

