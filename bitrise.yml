format_version: "2"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
    - RELEASE_VERSION: 3.6.2
    - GIT_REPOSITORY_URL: https://github.com/bitrise-io/steps-git-clone.git

workflows:
  # ----------------------------------------------------------------
  # --- workflow to Step Test
  test:
    before_run:
    - go-tests
    - _create_tmpdir
    steps:
    - path::./:
        run_if: true
        inputs:
        - clone_into_dir: repo-dir
        - commit: ""
        - tag: ""
        - branch: "master"
        - pull_request_id: ""
        - clone_depth: ""
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            echo "GIT_CLONE_COMMIT_HASH: ${GIT_CLONE_COMMIT_HASH}"
            echo "GIT_CLONE_COMMIT_MESSAGE_SUBJECT: ${GIT_CLONE_COMMIT_MESSAGE_SUBJECT}"
            echo "GIT_CLONE_COMMIT_MESSAGE_BODY: ${GIT_CLONE_COMMIT_MESSAGE_BODY}"
            echo "GIT_CLONE_COMMIT_COUNT: ${GIT_CLONE_COMMIT_COUNT}"
            echo "GIT_CLONE_COMMIT_AUTHOR_NAME: ${GIT_CLONE_COMMIT_AUTHOR_NAME}"
            echo "GIT_CLONE_COMMIT_AUTHOR_EMAIL: ${GIT_CLONE_COMMIT_AUTHOR_EMAIL}"
            echo "GIT_CLONE_COMMIT_COMMITER_NAME: ${GIT_CLONE_COMMIT_COMMITER_NAME}"
            echo "GIT_CLONE_COMMIT_COMMITER_EMAIL: ${GIT_CLONE_COMMIT_COMMITER_EMAIL}"
    - ensure-clean-git:
        inputs:
        - dir_to_check: repo-dir

  ci:
    envs:
    - CLONE_INTO_DIR: .
    - GIT_REPOSITORY_URL: https://github.com/bitrise-samples/git-clone-test.git
    before_run:
    - go-tests
    after_run:
    - _test_submodule
    - _test_no_checkout
    - _test_checkout_commit
    - _test_checkout_tag
    - _test_checkout_branch
    - _test_checkout_pull_request_id
    - _test_unshallow
    steps:
    - activate-ssh-key:
        run_if: true

  _test_submodule:
    before_run:
    - _create_tmpdir
    steps:
    - path::./:
        run_if: true
        inputs:
        - repository_url: git@gitlab.com:bitrise/git-clone-test.git
        - clone_into_dir: $CLONE_INTO_DIR
        - commit: ""
        - tag: ""
        - branch: "master"
        - pull_request_id: ""
        - pull_request_merge_branch: ""
        - pull_request_repository_url: ""
        - branch_dest: ""
        - clone_depth: ""
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            echo "GIT_CLONE_COMMIT_HASH: ${GIT_CLONE_COMMIT_HASH}"
            echo "GIT_CLONE_COMMIT_MESSAGE_SUBJECT: ${GIT_CLONE_COMMIT_MESSAGE_SUBJECT}"
            echo "GIT_CLONE_COMMIT_MESSAGE_BODY: ${GIT_CLONE_COMMIT_MESSAGE_BODY}"
            echo "GIT_CLONE_COMMIT_COUNT: ${GIT_CLONE_COMMIT_COUNT}"
            echo "GIT_CLONE_COMMIT_AUTHOR_NAME: ${GIT_CLONE_COMMIT_AUTHOR_NAME}"
            echo "GIT_CLONE_COMMIT_AUTHOR_EMAIL: ${GIT_CLONE_COMMIT_AUTHOR_EMAIL}"
            echo "GIT_CLONE_COMMIT_COMMITER_NAME: ${GIT_CLONE_COMMIT_COMMITER_NAME}"
            echo "GIT_CLONE_COMMIT_COMMITER_EMAIL: ${GIT_CLONE_COMMIT_COMMITER_EMAIL}"
    - ensure-clean-git:
        inputs:
        - dir_to_check: $CLONE_INTO_DIR

  _test_no_checkout:
    before_run:
    - _create_tmpdir
    steps:
    - path::./:
        run_if: true
        inputs:
        - clone_into_dir: $CLONE_INTO_DIR
        - commit: ""
        - tag: ""
        - branch: ""
        - pull_request_id: ""
        - pull_request_merge_branch: ""
        - pull_request_repository_url: ""
        - branch_dest: ""
        - clone_depth: ""
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            echo "GIT_CLONE_COMMIT_HASH: ${GIT_CLONE_COMMIT_HASH}"
            echo "GIT_CLONE_COMMIT_MESSAGE_SUBJECT: ${GIT_CLONE_COMMIT_MESSAGE_SUBJECT}"
            echo "GIT_CLONE_COMMIT_MESSAGE_BODY: ${GIT_CLONE_COMMIT_MESSAGE_BODY}"
            echo "GIT_CLONE_COMMIT_COUNT: ${GIT_CLONE_COMMIT_COUNT}"
            echo "GIT_CLONE_COMMIT_AUTHOR_NAME: ${GIT_CLONE_COMMIT_AUTHOR_NAME}"
            echo "GIT_CLONE_COMMIT_AUTHOR_EMAIL: ${GIT_CLONE_COMMIT_AUTHOR_EMAIL}"
            echo "GIT_CLONE_COMMIT_COMMITER_NAME: ${GIT_CLONE_COMMIT_COMMITER_NAME}"
            echo "GIT_CLONE_COMMIT_COMMITER_EMAIL: ${GIT_CLONE_COMMIT_COMMITER_EMAIL}"
    - ensure-clean-git:
        inputs:
        - dir_to_check: $CLONE_INTO_DIR

  _test_checkout_commit:
    before_run:
    - _create_tmpdir
    steps:
    - path::./:
        run_if: true
        inputs:
        - clone_into_dir: $CLONE_INTO_DIR
        - commit: 7a93251a9bf08fb8c6b19fc02f6d94618de6b386
        - tag: ""
        - branch: ""
        - pull_request_id: ""
        - pull_request_merge_branch: ""
        - pull_request_repository_url: ""
        - branch_dest: ""
        - clone_depth: ""
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            echo "GIT_CLONE_COMMIT_HASH: ${GIT_CLONE_COMMIT_HASH}"
            echo "GIT_CLONE_COMMIT_MESSAGE_SUBJECT: ${GIT_CLONE_COMMIT_MESSAGE_SUBJECT}"
            echo "GIT_CLONE_COMMIT_MESSAGE_BODY: ${GIT_CLONE_COMMIT_MESSAGE_BODY}"
            echo "GIT_CLONE_COMMIT_COUNT: ${GIT_CLONE_COMMIT_COUNT}"
            echo "GIT_CLONE_COMMIT_AUTHOR_NAME: ${GIT_CLONE_COMMIT_AUTHOR_NAME}"
            echo "GIT_CLONE_COMMIT_AUTHOR_EMAIL: ${GIT_CLONE_COMMIT_AUTHOR_EMAIL}"
            echo "GIT_CLONE_COMMIT_COMMITER_NAME: ${GIT_CLONE_COMMIT_COMMITER_NAME}"
            echo "GIT_CLONE_COMMIT_COMMITER_EMAIL: ${GIT_CLONE_COMMIT_COMMITER_EMAIL}"
    - ensure-clean-git:
        inputs:
        - dir_to_check: $CLONE_INTO_DIR

  _test_checkout_tag:
    before_run:
    - _create_tmpdir
    steps:
    - path::./:
        run_if: true
        inputs:
        - clone_into_dir: $CLONE_INTO_DIR
        - tag: 0.9.2
        - commit: ""
        - branch: ""
        - pull_request_id: ""
        - pull_request_merge_branch: ""
        - pull_request_repository_url: ""
        - branch_dest: ""
        - clone_depth: ""
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            echo "GIT_CLONE_COMMIT_HASH: ${GIT_CLONE_COMMIT_HASH}"
            echo "GIT_CLONE_COMMIT_MESSAGE_SUBJECT: ${GIT_CLONE_COMMIT_MESSAGE_SUBJECT}"
            echo "GIT_CLONE_COMMIT_MESSAGE_BODY: ${GIT_CLONE_COMMIT_MESSAGE_BODY}"
            echo "GIT_CLONE_COMMIT_COUNT: ${GIT_CLONE_COMMIT_COUNT}"
            echo "GIT_CLONE_COMMIT_AUTHOR_NAME: ${GIT_CLONE_COMMIT_AUTHOR_NAME}"
            echo "GIT_CLONE_COMMIT_AUTHOR_EMAIL: ${GIT_CLONE_COMMIT_AUTHOR_EMAIL}"
            echo "GIT_CLONE_COMMIT_COMMITER_NAME: ${GIT_CLONE_COMMIT_COMMITER_NAME}"
            echo "GIT_CLONE_COMMIT_COMMITER_EMAIL: ${GIT_CLONE_COMMIT_COMMITER_EMAIL}"
    - ensure-clean-git:
        inputs:
        - dir_to_check: $CLONE_INTO_DIR

  _test_checkout_branch:
    before_run:
    - _create_tmpdir
    steps:
    - path::./:
        run_if: true
        inputs:
        - clone_into_dir: $CLONE_INTO_DIR
        - branch: master
        - commit: ""
        - tag: ""
        - pull_request_id: ""
        - pull_request_merge_branch: ""
        - pull_request_repository_url: ""
        - branch_dest: ""
        - clone_depth: ""
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            echo "GIT_CLONE_COMMIT_HASH: ${GIT_CLONE_COMMIT_HASH}"
            echo "GIT_CLONE_COMMIT_MESSAGE_SUBJECT: ${GIT_CLONE_COMMIT_MESSAGE_SUBJECT}"
            echo "GIT_CLONE_COMMIT_MESSAGE_BODY: ${GIT_CLONE_COMMIT_MESSAGE_BODY}"
            echo "GIT_CLONE_COMMIT_COUNT: ${GIT_CLONE_COMMIT_COUNT}"
            echo "GIT_CLONE_COMMIT_AUTHOR_NAME: ${GIT_CLONE_COMMIT_AUTHOR_NAME}"
            echo "GIT_CLONE_COMMIT_AUTHOR_EMAIL: ${GIT_CLONE_COMMIT_AUTHOR_EMAIL}"
            echo "GIT_CLONE_COMMIT_COMMITER_NAME: ${GIT_CLONE_COMMIT_COMMITER_NAME}"
            echo "GIT_CLONE_COMMIT_COMMITER_EMAIL: ${GIT_CLONE_COMMIT_COMMITER_EMAIL}"
    - ensure-clean-git:
        inputs:
        - dir_to_check: $CLONE_INTO_DIR

  _test_checkout_pull_request_id:
    before_run:
    - _create_tmpdir
    steps:
    - path::./:
        run_if: true
        inputs:
        - clone_into_dir: $CLONE_INTO_DIR
        - pull_request_id: 5
        - pull_request_merge_branch: "pull/5/merge"
        - pull_request_repository_url: ""
        - branch_dest: ""
        - commit: ""
        - tag: ""
        - branch: ""
        - clone_depth: ""
        - manual_merge: "no"
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            echo "GIT_CLONE_COMMIT_HASH: ${GIT_CLONE_COMMIT_HASH}"
            echo "GIT_CLONE_COMMIT_MESSAGE_SUBJECT: ${GIT_CLONE_COMMIT_MESSAGE_SUBJECT}"
            echo "GIT_CLONE_COMMIT_MESSAGE_BODY: ${GIT_CLONE_COMMIT_MESSAGE_BODY}"
            echo "GIT_CLONE_COMMIT_COUNT: ${GIT_CLONE_COMMIT_COUNT}"
            echo "GIT_CLONE_COMMIT_AUTHOR_NAME: ${GIT_CLONE_COMMIT_AUTHOR_NAME}"
            echo "GIT_CLONE_COMMIT_AUTHOR_EMAIL: ${GIT_CLONE_COMMIT_AUTHOR_EMAIL}"
            echo "GIT_CLONE_COMMIT_COMMITER_NAME: ${GIT_CLONE_COMMIT_COMMITER_NAME}"
            echo "GIT_CLONE_COMMIT_COMMITER_EMAIL: ${GIT_CLONE_COMMIT_COMMITER_EMAIL}"
    - ensure-clean-git:
        inputs:
        - dir_to_check: $CLONE_INTO_DIR

  _test_unshallow:
    before_run:
    - _create_tmpdir
    steps:
    - path::./:
        run_if: true
        inputs:
        - clone_into_dir: $CLONE_INTO_DIR
        - commit: cfba2b01332e31cb1568dbf3f22edce063118bae
        - clone_depth: 1
        - tag: ""
        - branch: ""
        - pull_request_id: ""
        - pull_request_merge_branch: ""
        - pull_request_repository_url: ""
        - branch_dest: ""
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            echo "GIT_CLONE_COMMIT_HASH: ${GIT_CLONE_COMMIT_HASH}"
            echo "GIT_CLONE_COMMIT_MESSAGE_SUBJECT: ${GIT_CLONE_COMMIT_MESSAGE_SUBJECT}"
            echo "GIT_CLONE_COMMIT_MESSAGE_BODY: ${GIT_CLONE_COMMIT_MESSAGE_BODY}"
            echo "GIT_CLONE_COMMIT_COUNT: ${GIT_CLONE_COMMIT_COUNT}"
            echo "GIT_CLONE_COMMIT_AUTHOR_NAME: ${GIT_CLONE_COMMIT_AUTHOR_NAME}"
            echo "GIT_CLONE_COMMIT_AUTHOR_EMAIL: ${GIT_CLONE_COMMIT_AUTHOR_EMAIL}"
            echo "GIT_CLONE_COMMIT_COMMITER_NAME: ${GIT_CLONE_COMMIT_COMMITER_NAME}"
            echo "GIT_CLONE_COMMIT_COMMITER_EMAIL: ${GIT_CLONE_COMMIT_COMMITER_EMAIL}"
    - ensure-clean-git:
        inputs:
        - dir_to_check: $CLONE_INTO_DIR

  go-tests:
    before_run:
    - _install-test-tools
    steps:
    - script:
        title: Export go files to test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Err check
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go lint
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Go test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            go test $(go list ./... | grep -v vendor)

  _create_tmpdir:
    steps:
    - script:
        inputs:
        - content: envman add --key STEP_TMPDIR --value $(mktemp -d -t step-git-clone)
    - change-workdir:
        title: Change directory to a temporary directory
        is_always_run: true
        inputs:
        - path: $STEP_TMPDIR

  _install-test-tools:
    steps:
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            # Check for unhandled errors
            go get -u -v github.com/kisielk/errcheck

            # Go lint
            go get -u -v github.com/golang/lint/golint

  # ----------------------------------------------------------------
  # --- Utility workflows
  dep-update:
    title: Dep update
    description: |
      Used for updating bitrise dependencies with dep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go get -u -v github.com/golang/dep/cmd/dep
            dep ensure -v
            dep ensure -v -update
  # ----------------------------------------------------------------
  # --- workflow to create Release version
  create-release:
    steps:
    - script:
        title:
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go get -u github.com/bitrise-tools/releaseman
            export CI=true
            releaseman create --version "$RELEASE_VERSION"

  # ----------------------------------------------------------------
  # --- workflow to Share this step into a Step Library
  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml

  share-this-step:
    envs:
      # if you want to share this step into a StepLib
      - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
      - STEP_ID_IN_STEPLIB: git-clone
      - STEP_GIT_VERION_TAG_TO_SHARE: $RELEASE_VERSION
      - STEP_GIT_CLONE_URL: https://github.com/bitrise-io/steps-git-clone.git
    description: |-
      If this is the first time you try to share a Step you should
      first call: $ bitrise share
      This will print you a guide, and information about how Step sharing
      works. Please read it at least once!
      As noted in the Step sharing guide you'll have to fork the
      StepLib you want to share this step into. Once you're done with forking
      the repository you should set your own fork's git clone URL
      in the `.bitrise.secrets.yml` file, or here in the `envs` section,
      as the value of the `MY_STEPLIB_REPO_FORK_GIT_URL` environment.
      You're now ready to share this Step, just make sure that
      the `STEP_ID_IN_STEPLIB` and `STEP_GIT_VERION_TAG_TO_SHARE`
      environments are set to the desired values!
      To share this Step into a StepLib you can just run: $ bitrise run share-this-step
      Once it finishes the only thing left is to actually create a Pull Request,
      the way described in the guide printed at the end of the process.
    before_run:
    - audit-this-step
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            bitrise share start -c ${MY_STEPLIB_REPO_FORK_GIT_URL}
            bitrise share create --stepid ${STEP_ID_IN_STEPLIB} --tag ${STEP_GIT_VERION_TAG_TO_SHARE} --git ${STEP_GIT_CLONE_URL}
            bitrise share finish
